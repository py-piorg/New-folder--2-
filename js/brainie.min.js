


var __extends = function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (b !== undefined && (__.prototype = b.prototype), new __());
}

// ... (Your __extends function and other code) ...


var game, BrainieMain, WebFont, gW = 600, gH = 730, sndPlr, gameTexts, lang, mainFontName = {"en": "Arial"}, mainFont, gameCanvas, isStockAndroid = !1, Brainie;

(function (Brainie) {
    // Brainie is already defined here, no need to redefine

    var Boot = (function (_super) {
        __extends(Boot, _super);
        function Boot() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Boot.prototype.preload = function () {
            // Load assets needed for the loading screen
        };
        Boot.prototype.create = function () {
            this.scene.start('PreloaderScene');
        };
        return Boot;
    }(Phaser.Scene));
    Brainie.Boot = Boot;

    var Preloader = (function (_super) {
        __extends(Preloader, _super);
        function Preloader() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Preloader.prototype.preload = function () {
            // Load all game assets
        };
        Preloader.prototype.create = function () {
            this.scene.start('GameMainScene');
        };
        return Preloader;
    }(Phaser.Scene));
    Brainie.Preloader = Preloader;

    var GameMain = (function (_super) {
        __extends(GameMain, _super);
        function GameMain() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GameMain.prototype.create = function () {
            // Main game logic here
        };
        return GameMain;
    }(Phaser.Scene));
    Brainie.GameMain = GameMain;

    var BrainieMain = (function (_super) {
        __extends(BrainieMain, _super);
        function BrainieMain() {
            var _this = _super.call(this, {
                type: Phaser.AUTO,
                width: gW,
                height: gH,
                scene: {
                    Boot: Brainie.Boot,
                    PreloaderScene: Brainie.Preloader,
                    GameMainScene: Brainie.GameMain
                },
                parent: 'gameContainer'
            }) || this;
            return _this;
        }
        return BrainieMain;
    }(Phaser.Game));
    
    Brainie.BrainieMain = BrainieMain;
})(Brainie || (Brainie = {}));



function preloader() {
    // preload assets here
}

function create() {
    // create game objects here
}

function update() {
    // update game logic each frame here
}

const config = {
    type: Phaser.AUTO,  // Chooses WebGL or Canvas automatically
    width: 800,         // Width of the game window
    height: 600,        // Height of the game window
    scene: {
        preloader: preloader, // Function to preload assets
        create: create,   // Function to create game objects
        update: update    // Function to update game logic each frame
    }
};






function startGame() {
    lang = "en";
    mainFont = mainFontName[lang];
    game = new Brainie.BrainieMain();

    var startButton = document.getElementById('start');
    if (startButton) {
        startButton.addEventListener('click', function () {
            document.getElementById('menu').style.display = 'none';
            document.getElementById('mode-selection').style.display = 'flex';
            document.getElementById('background-music').play();
        });
    }
}



(function(b) {
    var c = function(b) {
        function a(a, e, c, k, g, h, l, m, n) {
            "undefined" === typeof n && (n = "center");
            b.call(this, a, e, "", !1);
            this.anchorY = this.anchorX = 0;
            this.x = c;
            this.y = k;
            this.txFld = new Phaser.Text(this.game,0,0,h,{
                font: l.toString() + "px " + g,
                fill: m,
                align: n
            });
            this.add(this.txFld)
        }
        __extends(a, b);
        a.prototype.setAnchor = function(a, b) {
            this.anchorX = a;
            this.anchorY = b;
            this.anchorUpdate()
        }
        ;
        a.prototype.anchorUpdate = function() {
            this.txFld.x = -this.txFld.width * this.anchorX;
            this.txFld.y = -this.txFld.height * this.anchorY
        }
        ;
        a.prototype.setText = function(a) {
            this.txFld.setText(a);
            this.anchorUpdate()
        }
        ;
        a.prototype.getWidth = function() {
            return this.txFld.width
        }
        ;
        return a
    }(Phaser.Group);
    b.BrainieNormalText = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(d) {
        function a(a, e, c, k, g, h, l) {
            d.call(this, a, e, "", !1);
            this.bName = "";
            this.bSmall = !1;
            this.initX = 0;
            this.isEnabled = !0;
            this.bName = g;
            this.bSmall = h;
            this.x = c;
            this.y = k;
            this.bgBm = this.create(0, 0, "mainSt", "");
            this.bSmall ? (this.bgBm.frameName = "menuBtnSml_up.png",
            this.initX = 65) : (this.bgBm.frameName = "menuBtn_up.png",
            this.initX = 130.5);
            this.labelFld = new b.BrainieNormalText(this.game,this,this.initX,20,mainFont,g,l,"#764f5c");
            this.labelFld.setAnchor(0.5, 0);
            this.bgBm.inputEnabled = !0;
            this.bgBm.events.onInputDown.add(this.down, this);
            this.bgBm.events.onInputOut.add(this.up, this);
            this.bgBm.events.onInputUp.add(this.up, this)
        }
        __extends(a, d);
        a.prototype.down = function() {
            this.bgBm.frameName = this.bSmall ? "menuBtnSml_dn.png" : "menuBtn_dn.png"
        }
        ;
        a.prototype.up = function() {
            this.bgBm.frameName = this.bSmall ? "menuBtnSml_up.png" : "menuBtn_up.png"
        }
        ;
        a.prototype.enableBtn = function(a) {
            this.isEnabled = a;
            this.alpha = (this.bgBm.input.enabled = a) ? 1 : 0.3
        }
        ;
        a.prototype.enableBtnInput = function(a) {
            this.isEnabled && (this.bgBm.input.enabled = a)
        }
        ;
        return a
    }(Phaser.Group);
    b.BtnBase = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(b) {
        function a(a, e, c, k, g, h) {
            b.call(this, a, e, c, "mainSt", 0);
            this.dnRect = this.upRect = this.bName = "";
            this.isEnabled = !0;
            this.bName = k;
            this.upRect = g;
            this.dnRect = h;
            this.frameName = this.upRect;
            this.inputEnabled = !0;
            this.events.onInputDown.add(this.down, this);
            this.events.onInputOut.add(this.up, this);
            this.events.onInputUp.add(this.up, this)
        }
        __extends(a, b);
        a.prototype.down = function() {
            this.frameName = this.dnRect
        }
        ;
        a.prototype.up = function() {
            this.frameName = this.upRect
        }
        ;
        a.prototype.enableBtn = function(a) {
            this.isEnabled = a;
            this.alpha = (this.input.enabled = a) ? 1 : 0.3
        }
        ;
        a.prototype.enableBtnInput = function(a) {
            this.isEnabled && (this.input.enabled = a)
        }
        ;
        return a
    }(Phaser.Sprite);
    b.ImgBtnBase = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(d) {
        function a() {
            d.apply(this, arguments)
        }
        __extends(a, d);
        a.prototype.preload = function() {
            this.txGrp = this.game.add.group();
            this.initTx = new b.BrainieNormalText(this.game,this.txGrp,-100,-100,mainFont,"A",20,"#ffffff");
            this.load.image("mainBg", "img/mainBg.jpg");
            this.load.image("preloaderBg", "img/preloader_bg.png");
            this.load.image("preloaderFill", "img/preloader_fill.png")
        }
        ;
        a.prototype.create = function() {
            this.initTx.destroy();
            this.txGrp.destroy();
            this.input.maxPointers = 1;
            this.scale.pageAlignHorizontally = !0;
            this.scale.pageAlignVertically = !0;
            this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.scale.hasResized.add(this.gameResized, this);
            this.game.device.desktop || (this.scale.forceOrientation(!1, !0),
            this.scale.enterIncorrectOrientation.add(this.enterIncorrectOrientation, this),
            this.scale.leaveIncorrectOrientation.add(this.leaveIncorrectOrientation, this));
            this.scale.setScreenSize(!0);
            WebFont.load({
                custom: {
                    families: ["Lilita One"]
                },
                active: this.fontsLoaded()
            })
        }
        ;
        a.prototype.fontsLoaded = function() {
            this.game.state.start("Preloader", !0, !1)
        }
        ;
        a.prototype.gameResized = function(a, b) {}
        ;
        a.prototype.enterIncorrectOrientation = function() {
            var a = this;
            this.orientationChange(!1);
            setTimeout(function() {
                return a.androidRefresh()
            }, 500)
        }
        ;
        a.prototype.leaveIncorrectOrientation = function() {
            var a = this;
            this.orientationChange(!0);
            setTimeout(function() {
                return a.androidRefresh()
            }, 500)
        }
        ;
        a.prototype.androidRefresh = function() {
            this.game.scale.refresh()
        }
        ;
        a.prototype.orientationChange = function(a) {
            a ? document.getElementById("orientation").style.display = "none" : document.getElementById("orientation").style.display = "block"
        }
        ;
        return a
    }(Phaser.State);
    b.Boot = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(d) {
        function a() {
            d.apply(this, arguments);
            this.BOX_SIZE = 70;
            this.GRID_COLUMNS = this.GRID_ROWS = 8;
            this.GRID_TOP_PADDING = 49;
            this.GRID_LEFT_PADDING = 20;
            this.CLOSE_TIME = this.OPEN_TIME = 800;
            this.GUI_FADE = 200;
            this.MENU_FADE = 300;
            this.SELECTED_BOXES_ARR = [];
            this.gameType = "cl";
            this.isReturning = !1;
            this.dTm = 1;
            this.fTm = 1E3 / 60
        }
        __extends(a, d);
        a.prototype.create = function() {
            brainieMain = this;
            sndPlr = new b.SoundPlayer(this.game);
            this.gameBg = this.add.sprite(0, 0, "mainBg");
            this.gamesCont = this.game.add.group();
            this.mainCont = this.game.add.group();
            this.goalNumber = new b.GoalNumber;
            this.randomBox = new b.RandomBox;
            this.checkSelection = new b.CheckSelection;
            this.gOverlay = new b.GameOverlay(this.game,this.mainCont);
            this.gGui = new b.GameGui(this.game,this.mainCont);
            this.scrnCont = new b.ScreensCont(this.game,this.mainCont);
            this.scrnCont.showMainMenu()
        }
        ;
        a.prototype.startActionGame = function() {
            this.gameType = "ac";
            null != this.actualGame && (this.actualGame.resetOnRemove(),
            this.actualGame.destroy());
            this.actualGame = new b.GameMainAction(this.game,this.gamesCont);
            this.actualGame.startGame();
            this.trackStart()
        }
        ;
        a.prototype.startClassicGame = function() {
            this.gameType = "cl";
            null != this.actualGame && (this.actualGame.resetOnRemove(),
            this.actualGame.destroy());
            this.actualGame = new b.GameMainClassic(this.game,this.gamesCont);
            this.actualGame.startGame();
            this.trackStart()
        }
        ;
        a.prototype.update = function() {
            this.dTm = this.game.time.elapsed / this.fTm;
            null != this.actualGame && this.actualGame.loop()
        }
        ;
        a.prototype.gameCallback = function(a) {
            switch (a) {
            case "levelComplete":
                this.scrnCont.showLevelMenu();
                sndPlr.playGameSnd("level_complete");
                this.trackClassicLevel();
                break;
            case "levelActionComplete":
                this.trackActionLevel();
                break;
            case "gameOver":
                this.scrnCont.showEndMenu();
                sndPlr.playGameSnd("game_over");
                this.trackGameOver();
                break;
            case "showPauseOver":
                this.scrnCont.showPauseMenu();
                break;
            case "Start_GAME_ACTION":
                this.scrnCont.hideMainMenu();
                this.startActionGame();
                break;
            case "Start_GAME_CLASSIC":
                this.scrnCont.hideMainMenu();
                this.startClassicGame();
                break;
            case "GAME_NEXT_LEVEL":
                this.scrnCont.hideLevelMenu();
                this.actualGame.startNextLevel();
                break;
            case "GAME_PAUSE":
                this.actualGame.pauseGame();
                break;
            case "GAME_RESUME":
                this.scrnCont.hidePauseMenu();
                this.actualGame.resumeGame();
                break;
            case "GAME_END_PAUSE":
                this.actualGame.enableGame(!1);
                this.actualGame.gameStarted = !1;
                this.scrnCont.hidePauseMenu();
                this.scrnCont.showEndMenu();
                this.trackGameOver();
                break;
            case "GAME_END_LEVEL":
                this.actualGame.enableGame(!1);
                this.actualGame.gameStarted = !1;
                this.scrnCont.hideLevelMenu();
                this.scrnCont.showEndMenu();
                this.trackGameOver();
                break;
            case "GAME_BACKTOMAIN":
                this.isReturning = !0;
                this.gameType = "cl";
                this.scrnCont.hideEndMenu();
                this.scrnCont.showMainMenu();
                break;
            case "SHOW_HELP":
                this.scrnCont.showHelp();
                break;
            case "CLOSE_HELP":
                this.scrnCont.hideHelp();
                break;
            case "RESET_SELECTION":
                this.actualGame && this.actualGame.resetBoxSelection()
            }
        }
        ;
        a.prototype.pauseCall = function() {}
        ;
        a.prototype.resumeCall = function() {}
        ;
        a.prototype.moreGamesCall = function() {}
        ;
        a.prototype.trackActionLevel = function() {}
        ;
        a.prototype.trackClassicLevel = function() {}
        ;
        a.prototype.trackGameOver = function() {}
        ;
        a.prototype.trackStart = function() {}
        ;
        return a
    }(Phaser.State);
    b.GameMain = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function() {
        return function(b, a, f) {
            this.var0 = b;
            this.var1 = a;
            this.var2 = f
        }
    }();
    b.CheckSelectedResult = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function() {
        function d() {
            this.isColor = this.isMatch = !1;
            this.calcValue = this.addPoints = 0;
            this.ptsMult = 1;
            this.colorID = 0
        }
        d.prototype.checkSelected = function(a, f) {
            this.isMatch = !1;
            this.calcValue = this.addPoints = 0;
            this.ptsMult = 1;
            this.colorID = 0;
            1 < a.length ? (this.isColor = !0,
            this.colorID = a[0].bxColor) : this.isColor = !1;
            for (var e = 0; e < a.length; e++)
                switch (a[e].bxColor != this.colorID && (this.isColor = !1),
                a[e].bxType) {
                case 1:
                    this.calcValue += a[e].bxValue;
                    break;
                case 2:
                    this.calcValue -= a[e].bxValue;
                    this.ptsMult = 1.2;
                    break;
                case 3:
                    this.calcValue *= a[e].bxValue;
                    this.ptsMult = 1.5;
                    break;
                case 4:
                    this.calcValue /= a[e].bxValue,
                    this.ptsMult = 1.5
                }
            if (this.calcValue == f)
                switch (this.isMatch = !0,
                a.length) {
                case 1:
                    this.addPoints = 50;
                    break;
                case 2:
                    this.addPoints = 110;
                    break;
                case 3:
                    this.addPoints = 170;
                    break;
                case 4:
                    this.addPoints = 230;
                    break;
                case 5:
                    this.addPoints = 290;
                    break;
                case 6:
                    this.addPoints = 350;
                    break;
                case 7:
                    this.addPoints = 410;
                    break;
                case 8:
                    this.addPoints = 470;
                    break;
                case 9:
                    this.addPoints = 530;
                    break;
                default:
                    this.addPoints = 600
                }
            this.addPoints = Math.round(this.addPoints * this.ptsMult);
            this.isColor && (this.addPoints = Math.round(1.5 * this.addPoints));
            return new b.CheckSelectedResult(this.isMatch,this.addPoints,this.isColor)
        }
        ;
        return d
    }();
    b.CheckSelection = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function() {
        function b() {
            this.pos = [];
            this.neg = [];
            this.mul = [];
            this.div = [];
            this.actualLevel = 1;
            this.returnNum = 0
        }
        b.prototype.setArrays = function(a) {
            this.pos = [];
            this.neg = [];
            this.mul = [];
            this.div = [];
            for (var f = 0; f < a.length; f++)
                switch (a[f].bxType) {
                case 1:
                    this.pos.push(a[f].bxValue);
                    break;
                case 2:
                    this.neg.push(a[f].bxValue);
                    break;
                case 3:
                    this.mul.push(a[f].bxValue);
                    break;
                case 4:
                    this.div.push(a[f].bxValue)
                }
        }
        ;
        b.prototype.getGoalNumber = function(a, f) {
            this.actualLevel = f;
            this.returnNum = 0;
            this.setArrays(a);
            var b = 0
              , b = 3 > this.actualLevel ? Math.round(1.9 * Math.random() + 0.5) : Math.round(2.9 * Math.random() + 0.5);
            0 == this.pos.length ? (this.returnNum = Math.round(10 * Math.random()) + 4,
            b = 0) : b > this.pos.length && (b = this.pos.length);
            for (var d = 0; d < b; d++) {
                var c = Math.round(Math.random() * (this.pos.length - 1));
                this.returnNum += this.pos[c];
                this.pos.splice(c, 1)
            }
            b = 0;
            b = 3 > this.actualLevel ? Math.round(1.9 * Math.random() + 0.5) - 1 : Math.round(1.9 * Math.random() + 0.5);
            b > this.neg.length && (b = this.neg.length);
            for (d = 0; d < b; d++)
                c = Math.round(Math.random() * (this.neg.length - 1)),
                0 < this.returnNum - this.neg[c] && (this.returnNum -= this.neg[c]),
                this.neg.splice(c, 1);
            b = d = 0;
            5 > this.actualLevel ? d = Math.round(1.9 * Math.random() + 0.5) - 1 : 0.5 < Math.random() ? d = 3 < this.pos.length ? Math.round(1.9 * Math.random() + 0.5) - 1 : 1 : b = 3 < this.pos.length ? Math.round(1.9 * Math.random() + 0.5) - 1 : 1;
            d > this.mul.length && (d = this.mul.length);
            b > this.div.length && (b = this.div.length);
            for (c = 0; c < d; c++) {
                var g = Math.round(Math.random() * (this.mul.length - 1));
                100 > this.returnNum * this.mul[g] && (this.returnNum *= this.mul[g]);
                this.mul.splice(g, 1)
            }
            for (d = 0; d < b; d++)
                c = Math.round(Math.random() * (this.div.length - 1)),
                0 == this.returnNum % this.div[c] && (this.returnNum /= this.div[c]),
                this.div.splice(c, 1);
            return this.returnNum
        }
        ;
        return b
    }();
    b.GoalNumber = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function() {
        function d() {
            this.randomer = 0;
            this.selectedValue = this.selectedColor = this.selectedType = 1;
            this.currRow = this.currCol = 0;
            this.actualLevel = 1
        }
        d.prototype.getRandomNumBox = function(a, f, e, d, c, g, h) {
            "undefined" === typeof e && (e = 0);
            "undefined" === typeof d && (d = 0);
            "undefined" === typeof c && (c = 0);
            "undefined" === typeof g && (g = !1);
            "undefined" === typeof h && (h = null);
            brainieMain.goalNumber.setArrays(h);
            this.actualLevel = c;
            this.currCol = d;
            this.currRow = e;
            this.randomer = Math.random();
            this.selectedType = g && brainieMain.goalNumber.pos.length < brainieMain.goalNumber.neg.length + brainieMain.goalNumber.mul.length + brainieMain.goalNumber.div.length ? 1 : 1 == this.actualLevel ? 1 : 2 == this.actualLevel ? 0.8 < this.randomer ? 2 : 1 : 3 == this.actualLevel ? 0.7 < this.randomer ? 2 : 1 : 4 == this.actualLevel ? 0.7 < this.randomer ? 2 : 0.65 < this.randomer ? 3 : 1 : 0.7 < this.randomer ? 2 : 0.65 < this.randomer ? 3 : 0.6 < this.randomer ? 4 : 1;
            this.selectedValue = 1 == this.actualLevel ? Math.round(3.9 * Math.random() + 0.5) : 2 == this.actualLevel ? 0.8 < this.randomer ? Math.round(1.9 * Math.random() + 0.5) : Math.round(8.9 * Math.random() + 0.5) : 3 == this.actualLevel ? 0.7 < this.randomer ? Math.round(1.9 * Math.random() + 0.5) : Math.round(8.9 * Math.random() + 0.5) : 4 == this.actualLevel ? 0.7 < this.randomer ? Math.round(1.9 * Math.random() + 0.5) : 0.65 < this.randomer ? Math.round(1.9 * Math.random() + 1.5) : Math.round(8.9 * Math.random() + 0.5) : 0.7 < this.randomer ? Math.round(1.9 * Math.random() + 0.5) : 0.65 < this.randomer ? Math.round(1.9 * Math.random() + 1.5) : 0.6 < this.randomer ? Math.round(1.9 * Math.random() + 1.5) : Math.round(8.9 * Math.random() + 0.5);
            this.selectedColor = 5 > this.actualLevel ? 1 + Math.round(Math.random() * (this.actualLevel + 0.9) - 0.5) : 1 + Math.round(5.9 * Math.random() - 0.5);
            return new b.NumBox(a,f,this.selectedValue,this.selectedType,this.currCol,this.currRow,this.selectedColor)
        }
        ;
        return d
    }();
    b.RandomBox = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function() {
        function b(a) {
            this.soundEnabled = this.soundOn = !0;
            this.sndsPool = [];
            this.sndIDsPool = [];
            if (a.device.desktop && a.device.webAudio) {
                this.soundEnabled = !0;
                for (var f = 0; f < game.snds.length; f++)
                    this.sndIDsPool.push(game.snds[f]),
                    this.sndsPool.push(a.add.audio(game.snds[f]))
            } else
                this.soundEnabled = !1
        }
        b.prototype.playGameSnd = function(a) {
            this.soundOn && this.soundEnabled && -1 != this.sndIDsPool.indexOf(a) && this.sndsPool[this.sndIDsPool.indexOf(a)].play("", 0, 1, !1)
        }
        ;
        b.prototype.playSelectSound = function() {
            0.5 > Math.random() ? this.playGameSnd("box_select_1") : this.playGameSnd("box_select_2")
        }
        ;
        return b
    }();
    b.SoundPlayer = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(b) {
        function a(a, e) {
            b.call(this, a, e, "", !1);
            this.gameStarted = this.gameRunning = !1;
            this.y = 730
        }
        __extends(a, b);
        a.prototype.resetOnRemove = function() {}
        ;
        a.prototype.pauseGame = function() {}
        ;
        a.prototype.startGame = function() {}
        ;
        a.prototype.startNextLevel = function() {}
        ;
        a.prototype.resumeGame = function() {}
        ;
        a.prototype.enableGame = function(a) {}
        ;
        a.prototype.resetBoxSelection = function(a) {}
        ;
        a.prototype.boxEvent = function(a) {}
        ;
        a.prototype.loop = function() {}
        ;
        a.prototype.openAnim = function() {
            this.tempTwn && this.tempTwn.stop();
            this.tempTwn = game.add.tween(this);
            this.tempTwn.to({
                y: 0
            }, brainieMain.OPEN_TIME, Phaser.Easing.Sinusoidal.InOut, !0, 0, !1)
        }
        ;
        a.prototype.closeAnim = function() {
            this.tempTwn && this.tempTwn.stop();
            this.tempTwn = game.add.tween(this);
            this.tempTwn.to({
                y: 730
            }, brainieMain.CLOSE_TIME, Phaser.Easing.Sinusoidal.InOut, !0, brainieMain.GUI_FADE, !1)
        }
        ;
        return a
    }(Phaser.Group);
    b.GameBase = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(d) {
        function a(a, b) {
            d.call(this, a, b);
            this.score = 0;
            this.goalNum = 1;
            this.gameIsOver = this.gameStarted = this.gameRunning = !1;
            this.endCt = 0;
            this.fallLimit = 4E3;
            this.currentFallTime = this.gameTime = 0;
            this.currentLevel = 1;
            this.boxesArr = [];
            this.startRows = 3;
            this.bxInWave = 0;
            this.possibleWPos = [];
            this.bombOnBox = this.boxRemoved = this.boxesTotal = this.waveID = this.selectedCol = this.selectedRow = 0;
            this.enableGame(!1);
            this.setLayers();
            brainieMain.gGui.resetGui()
        }
        __extends(a, d);
        a.prototype.setGoalNumber = function() {
            this.goalNum = brainieMain.goalNumber.getGoalNumber(this.boxesArr, this.currentLevel);
            brainieMain.gGui.numBubble.showNumber(this.goalNum)
        }
        ;
        a.prototype.resetOnRemove = function() {
            for (var a = 0; a < this.boxesArr.length; a++)
                this.boxesArr[a].destroyBox();
            this.removeAll()
        }
        ;
        a.prototype.scoreUpdate = function() {
            brainieMain.gGui.scoreLabel.updateScore(this.score)
        }
        ;
        a.prototype.enableGame = function(a) {
            "undefined" === typeof a && (a = !0);
            this.gameRunning = a ? !0 : !1;
            for (var b = 0; b < this.boxesArr.length; b++)
                this.boxesArr[b].enableBox(a);
            brainieMain.gGui && brainieMain.gGui.gameButtons.enableButtons(a)
        }
        ;
        a.prototype.startGame = function() {
            var a = this;
            this.gameStarted = !0;
            brainieMain.SELECTED_BOXES_ARR = [];
            brainieMain.gOverlay.openOver();
            this.openAnim();
            this.createStartBoxes();
            setTimeout(function() {
                return a.setGoalNumber()
            }, brainieMain.GUI_FADE + brainieMain.OPEN_TIME);
            this.resetTimers();
            this.initBombPosition();
            setTimeout(function() {
                return a.enableGame(!0)
            }, brainieMain.GUI_FADE + brainieMain.OPEN_TIME)
        }
        ;
        a.prototype.pauseGame = function() {
            this.gameRunning && (setTimeout(function() {
                return brainieMain.gameCallback("showPauseOver")
            }, brainieMain.GUI_FADE + brainieMain.CLOSE_TIME),
            brainieMain.gOverlay.closeOver(),
            this.closeAnim(),
            this.enableGame(!1))
        }
        ;
        a.prototype.resumeGame = function() {
            var a = this;
            this.gameRunning || (brainieMain.gOverlay.openOver(),
            this.openAnim(),
            setTimeout(function() {
                return a.enableGame(!0)
            }, brainieMain.GUI_FADE + brainieMain.OPEN_TIME))
        }
        ;
        a.prototype.gameOver = function() {
            this.gameStarted = !1;
            brainieMain.gGui.numBubble.hideLabel();
            this.gameIsOver = !0;
            this.enableGame(!1)
        }
        ;
        a.prototype.checkGameOver = function() {
            for (var a = this.endCt = 0; a < this.boxesArr.length; a++)
                0 == this.boxesArr[a].moveSpeed && this.endCt++;
            this.endCt == this.boxesArr.length && (this.gameIsOver = !1,
            brainieMain.gOverlay.closeOver(),
            this.closeAnim(),
            setTimeout(function() {
                return brainieMain.gameCallback("gameOver")
            }, brainieMain.GUI_FADE + brainieMain.CLOSE_TIME))
        }
        ;
        a.prototype.resetBoxSelection = function(a) {
            "undefined" === typeof a && (a = !0);
            a && sndPlr.playGameSnd("reset");
            for (a = 0; a < brainieMain.SELECTED_BOXES_ARR.length; a++)
                brainieMain.SELECTED_BOXES_ARR[a].selected && brainieMain.SELECTED_BOXES_ARR[a].deselectBox(!1);
            brainieMain.SELECTED_BOXES_ARR = []
        }
        ;
        a.prototype.setLayers = function() {
            this.gameBg = new b.GameBg(this.game);
            this.add(this.gameBg);
            this.bxLr = this.game.add.group();
            this.bxLr.x = brainieMain.GRID_LEFT_PADDING;
            this.bxLr.y = brainieMain.GRID_TOP_PADDING;
            this.add(this.bxLr);
            this.effLr = new b.EffectsLr(this.game,this)
        }
        ;
        a.prototype.resetTimers = function() {
            this.currentFallTime = this.gameTime = 0;
            brainieMain.gGui.timers.updateHands(0, 0)
        }
        ;
        a.prototype.updateTimers = function() {
            this.gameRunning && (this.currentFallTime += this.game.time.elapsed,
            this.gameTime += this.game.time.elapsed,
            this.currentFallTime >= this.fallLimit && (6 > this.currentLevel ? this.createWave(this.currentLevel) : this.createWave(6),
            this.currentFallTime = 0),
            brainieMain.gGui.timers.updateHands(this.boxRemoved % 10 / 10, this.currentFallTime / this.fallLimit))
        }
        ;
        a.prototype.levelComplete = function() {
            this.currentLevel++;
            brainieMain.gGui.levels.updateLevel(this.currentLevel);
            brainieMain.gameCallback("levelActionComplete");
            this.fallLimit -= 300;
            1E3 > this.fallLimit && (this.fallLimit = 1E3)
        }
        ;
        a.prototype.createStartBoxes = function() {
            this.waveID = 0;
            if (0 < this.boxesArr.length) {
                for (var a = 0; a < this.boxesArr.length; a++)
                    this.boxesArr[a].destroyBox();
                this.boxesArr = []
            }
            for (a = 0; a < this.startRows; a++)
                for (var b = 0; b < brainieMain.GRID_COLUMNS; b++) {
                    var d = brainieMain.randomBox.getRandomNumBox(this.game, this.bxLr, brainieMain.GRID_ROWS - a, b, this.currentLevel, !1, this.boxesArr);
                    d.y = brainieMain.BOX_SIZE * brainieMain.GRID_ROWS - a * brainieMain.BOX_SIZE;
                    this.boxesArr.push(d)
                }
        }
        ;
        a.prototype.createWave = function(a) {
            sndPlr.playGameSnd("wave");
            this.waveID++;
            this.bxInWave = a;
            this.possibleWPos = [];
            for (a = 0; a < brainieMain.GRID_COLUMNS; a++)
                this.possibleWPos.push(a);
            for (a = 0; a < this.boxesArr.length; a++)
                1 == this.boxesArr[a].bxRow && this.possibleWPos.length > this.bxInWave && this.possibleWPos.splice(this.possibleWPos.indexOf(this.boxesArr[a].bxCol), 1);
            for (a = 0; a < this.bxInWave; a++) {
                this.boxesTotal++;
                this.selectedCol = this.possibleWPos.splice(Math.round(Math.random() * (this.possibleWPos.length - 1)), 1)[0];
                this.selectedRow = brainieMain.GRID_ROWS;
                for (var d = 0; d < this.boxesArr.length; d++)
                    this.boxesArr[d].bxCol == this.selectedCol && this.selectedRow--;
                if (0 == this.selectedRow) {
                    this.gameOver();
                    break
                }
                d = this.testBombCreation(a) ? new b.NumBox(this.game,this.bxLr,0,5,this.selectedCol,this.selectedRow,7) : brainieMain.randomBox.getRandomNumBox(this.game, this.bxLr, this.selectedRow, this.selectedCol, this.currentLevel, !0, this.boxesArr);
                d.dropBox();
                this.boxesArr.push(d)
            }
        }
        ;
        a.prototype.boxEvent = function(a) {
            this.selectedBox = a;
            this.selectedBox.selected ? (5 == this.selectedBox.bxType && (this.resetBoxSelection(!1),
            brainieMain.gGui.numBubble.hintChange(!1)),
            brainieMain.SELECTED_BOXES_ARR.push(this.selectedBox)) : brainieMain.SELECTED_BOXES_ARR.splice(brainieMain.SELECTED_BOXES_ARR.indexOf(this.selectedBox), 1);
            if (0 < brainieMain.SELECTED_BOXES_ARR.length && 5 != this.selectedBox.bxType)
                if (5 == brainieMain.SELECTED_BOXES_ARR[0].bxType) {
                    for (a = 0; a < this.boxesArr.length; a++)
                        this.boxesArr[a].bxColor == this.selectedBox.bxColor && this.boxesArr[a] != this.selectedBox && brainieMain.SELECTED_BOXES_ARR.push(this.boxesArr[a]);
                    sndPlr.playGameSnd("box_explosion");
                    this.score += 70 * (brainieMain.SELECTED_BOXES_ARR.length - 1);
                    this.scoreUpdate();
                    this.removeSelectedBoxes();
                    brainieMain.gGui.numBubble.hintChange(!0)
                } else
                    this.checkSelectedResult = brainieMain.checkSelection.checkSelected(brainieMain.SELECTED_BOXES_ARR, this.goalNum),
                    !0 == this.checkSelectedResult.var0 && (this.score += this.checkSelectedResult.var1,
                    this.scoreUpdate(),
                    this.removeSelectedBoxes(),
                    0 < this.boxesArr.length && this.setGoalNumber(),
                    this.checkSelectedResult.var2 ? (this.effLr.showColorEff(),
                    sndPlr.playGameSnd("box_color")) : sndPlr.playGameSnd("box_normal"))
        }
        ;
        a.prototype.removeSelectedBoxes = function() {
            for (var a = 0; a < brainieMain.SELECTED_BOXES_ARR.length; a++) {
                this.boxesArr.splice(this.boxesArr.indexOf(brainieMain.SELECTED_BOXES_ARR[a]), 1);
                for (var b = 0; b < this.boxesArr.length; b++)
                    this.boxesArr[b].bxCol == brainieMain.SELECTED_BOXES_ARR[a].bxCol && this.boxesArr[b].bxRow < brainieMain.SELECTED_BOXES_ARR[a].bxRow && this.boxesArr[b].moveDown();
                brainieMain.SELECTED_BOXES_ARR[a].destroyBox()
            }
            brainieMain.SELECTED_BOXES_ARR = [];
            0 == this.boxesArr.length && (this.score += 1E3,
            this.scoreUpdate(),
            this.effLr.showClearEff(),
            setTimeout(function() {
                return sndPlr.playGameSnd("clear_eff")
            }, 200),
            this.createWave(8),
            this.currentFallTime = 0,
            this.setGoalNumber());
            this.boxRemoved++;
            0 == this.boxRemoved % 10 && this.levelComplete()
        }
        ;
        a.prototype.initBombPosition = function() {
            this.bombOnBox = 15 + Math.round(8 * Math.random())
        }
        ;
        a.prototype.testBombCreation = function(a) {
            this.tstBmbReturn = !1;
            this.boxesTotal >= this.bombOnBox && (this.tstBmbReturn = !0,
            this.bombOnBox = this.boxesTotal + 30 + Math.round(15 * Math.random()));
            return this.tstBmbReturn
        }
        ;
        a.prototype.loop = function() {
            this.updateTimers();
            this.gameRunning ? this.bxsUpdate() : this.gameIsOver && (this.bxsUpdate(),
            this.checkGameOver())
        }
        ;
        a.prototype.bxsUpdate = function() {
            for (var a = 0; a < this.boxesArr.length; a++)
                this.boxesArr[a].tryMove()
        }
        ;
        return a
    }(b.GameBase);
    b.GameMainAction = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(d) {
        function a(a, b) {
            d.call(this, a, b);
            this.score = 0;
            this.goalNum = 1;
            this.gameIsOver = this.gameStarted = this.gameRunning = !1;
            this.endCt = 0;
            this.levelLimit = 6E4;
            this.fallLimit = 1E4;
            this.currentFallTime = this.currentLevelTime = 0;
            this.currentLevel = 1;
            this.boxesArr = [];
            this.startRows = 3;
            this.bxInWave = 0;
            this.possibleWPos = [];
            this.waveID = this.selectedCol = this.selectedRow = 0;
            this.boxesInWave = 1;
            this.bombsLevelLimit = 2;
            this.bombsWavePosArr = [];
            this.bombsPosArr = [];
            this.bombsTempArr = [];
            this.enableGame(!1);
            this.setLayers();
            brainieMain.gGui.resetGui()
        }
        __extends(a, d);
        a.prototype.setGoalNumber = function() {
            this.goalNum = brainieMain.goalNumber.getGoalNumber(this.boxesArr, this.currentLevel);
            brainieMain.gGui.numBubble.showNumber(this.goalNum)
        }
        ;
        a.prototype.resetOnRemove = function() {
            for (var a = 0; a < this.boxesArr.length; a++)
                this.boxesArr[a].destroyBox();
            this.removeAll()
        }
        ;
        a.prototype.scoreUpdate = function() {
            brainieMain.gGui.scoreLabel.updateScore(this.score)
        }
        ;
        a.prototype.enableGame = function(a) {
            "undefined" === typeof a && (a = !0);
            this.gameRunning = a ? !0 : !1;
            for (var b = 0; b < this.boxesArr.length; b++)
                this.boxesArr[b].enableBox(a);
            brainieMain.gGui && brainieMain.gGui.gameButtons.enableButtons(a)
        }
        ;
        a.prototype.startGame = function() {
            var a = this;
            this.gameStarted = !0;
            brainieMain.SELECTED_BOXES_ARR = [];
            brainieMain.gOverlay.openOver();
            this.openAnim();
            this.createStartBoxes();
            setTimeout(function() {
                return a.setGoalNumber()
            }, brainieMain.GUI_FADE + brainieMain.OPEN_TIME);
            this.resetTimers();
            this.setBombsPositions();
            setTimeout(function() {
                return a.enableGame(!0)
            }, brainieMain.GUI_FADE + brainieMain.OPEN_TIME)
        }
        ;
        a.prototype.pauseGame = function() {
            this.gameRunning && (setTimeout(function() {
                return brainieMain.gameCallback("showPauseOver")
            }, brainieMain.GUI_FADE + brainieMain.CLOSE_TIME),
            brainieMain.gOverlay.closeOver(),
            this.closeAnim(),
            this.enableGame(!1))
        }
        ;
        a.prototype.resumeGame = function() {
            var a = this;
            this.gameRunning || (brainieMain.gOverlay.openOver(),
            this.openAnim(),
            setTimeout(function() {
                return a.enableGame(!0)
            }, brainieMain.GUI_FADE + brainieMain.OPEN_TIME))
        }
        ;
        a.prototype.gameOver = function() {
            this.gameStarted = !1;
            brainieMain.gGui.numBubble.hideLabel();
            this.gameIsOver = !0;
            this.enableGame(!1)
        }
        ;
        a.prototype.checkGameOver = function() {
            for (var a = this.endCt = 0; a < this.boxesArr.length; a++)
                0 == this.boxesArr[a].moveSpeed && this.endCt++;
            this.endCt == this.boxesArr.length && (this.gameIsOver = !1,
            brainieMain.gOverlay.closeOver(),
            this.closeAnim(),
            setTimeout(function() {
                return brainieMain.gameCallback("gameOver")
            }, brainieMain.GUI_FADE + brainieMain.CLOSE_TIME))
        }
        ;
        a.prototype.resetBoxSelection = function(a) {
            "undefined" === typeof a && (a = !0);
            a && sndPlr.playGameSnd("reset");
            for (a = 0; a < brainieMain.SELECTED_BOXES_ARR.length; a++)
                brainieMain.SELECTED_BOXES_ARR[a].selected && brainieMain.SELECTED_BOXES_ARR[a].deselectBox(!1);
            brainieMain.SELECTED_BOXES_ARR = []
        }
        ;
        a.prototype.setLayers = function() {
            this.gameBg = new b.GameBg(this.game);
            this.add(this.gameBg);
            this.bxLr = this.game.add.group();
            this.bxLr.x = brainieMain.GRID_LEFT_PADDING;
            this.bxLr.y = brainieMain.GRID_TOP_PADDING;
            this.add(this.bxLr);
            this.effLr = new b.EffectsLr(this.game,this)
        }
        ;
        a.prototype.resetTimers = function() {
            this.currentFallTime = this.currentLevelTime = 0;
            brainieMain.gGui.timers.updateHands(0, 0)
        }
        ;
        a.prototype.updateTimers = function() {
            this.gameRunning && (this.currentLevelTime += this.game.time.elapsed,
            this.currentFallTime += this.game.time.elapsed,
            this.currentLevelTime >= this.levelLimit ? (this.currentLevelTime = this.levelLimit,
            this.levelComplete()) : this.currentFallTime >= this.fallLimit && (this.createWave(),
            this.currentFallTime = 0),
            brainieMain.gGui.timers.updateHands(this.currentLevelTime / this.levelLimit, this.currentFallTime / this.fallLimit))
        }
        ;
        a.prototype.levelComplete = function() {
            this.gameStarted = !1;
            brainieMain.gGui.numBubble.hideLabel();
            this.enableGame(!1);
            brainieMain.gOverlay.closeOver();
            this.closeAnim();
            setTimeout(function() {
                return brainieMain.gameCallback("levelComplete")
            }, brainieMain.GUI_FADE + brainieMain.CLOSE_TIME)
        }
        ;
        a.prototype.startNextLevel = function() {
            this.gameStarted = !0;
            this.currentLevel++;
            brainieMain.gGui.levels.updateLevel(this.currentLevel);
            this.fallLimit = 1E4 - 1E3 * (this.currentLevel - 1);
            5E3 > this.fallLimit && (this.fallLimit = 5E3);
            this.startGame()
        }
        ;
        a.prototype.createStartBoxes = function() {
            this.waveID = 0;
            if (0 < this.boxesArr.length) {
                for (var a = 0; a < this.boxesArr.length; a++)
                    this.boxesArr[a].destroyBox();
                this.boxesArr = []
            }
            this.startRows = 1 == this.currentLevel ? 2 : 4 >= this.currentLevel ? 3 : 7 >= this.currentLevel ? 4 : 5;
            for (a = 0; a < this.startRows; a++)
                for (var b = 0; b < brainieMain.GRID_COLUMNS; b++) {
                    var d = brainieMain.randomBox.getRandomNumBox(this.game, this.bxLr, brainieMain.GRID_ROWS - a, b, this.currentLevel, !1, this.boxesArr);
                    d.y = brainieMain.BOX_SIZE * brainieMain.GRID_ROWS - a * brainieMain.BOX_SIZE;
                    this.boxesArr.push(d)
                }
        }
        ;
        a.prototype.createWave = function() {
            sndPlr.playGameSnd("wave");
            this.waveID++;
            this.bxInWave = this.getBoxInWave();
            this.bxInWave > brainieMain.GRID_COLUMNS && (this.bxInWave = brainieMain.GRID_COLUMNS);
            this.possibleWPos = [];
            for (var a = 0; a < brainieMain.GRID_COLUMNS; a++)
                this.possibleWPos.push(a);
            for (a = 0; a < this.boxesArr.length; a++)
                1 == this.boxesArr[a].bxRow && this.possibleWPos.length > this.bxInWave && this.possibleWPos.splice(this.possibleWPos.indexOf(this.boxesArr[a].bxCol), 1);
            for (a = 0; a < this.bxInWave; a++) {
                this.selectedCol = this.possibleWPos.splice(Math.round(Math.random() * (this.possibleWPos.length - 1)), 1)[0];
                this.selectedRow = brainieMain.GRID_ROWS;
                for (var d = 0; d < this.boxesArr.length; d++)
                    this.boxesArr[d].bxCol == this.selectedCol && this.selectedRow--;
                if (0 == this.selectedRow) {
                    this.gameOver();
                    break
                }
                d = this.testBombCreation(a) ? new b.NumBox(this.game,this.bxLr,0,5,this.selectedCol,this.selectedRow,7) : brainieMain.randomBox.getRandomNumBox(this.game, this.bxLr, this.selectedRow, this.selectedCol, this.currentLevel, !0, this.boxesArr);
                d.dropBox();
                this.boxesArr.push(d)
            }
        }
        ;
        a.prototype.getBoxInWave = function() {
            return this.boxesInWave = 2 >= this.currentLevel ? 2 : 4 >= this.currentLevel ? 3 : 6 >= this.currentLevel ? 4 : 8 >= this.currentLevel ? 5 : 6
        }
        ;
        a.prototype.boxEvent = function(a) {
            this.selectedBox = a;
            this.selectedBox.selected ? (5 == this.selectedBox.bxType && (this.resetBoxSelection(!1),
            brainieMain.gGui.numBubble.hintChange(!1)),
            brainieMain.SELECTED_BOXES_ARR.push(this.selectedBox)) : brainieMain.SELECTED_BOXES_ARR.splice(brainieMain.SELECTED_BOXES_ARR.indexOf(this.selectedBox), 1);
            if (0 < brainieMain.SELECTED_BOXES_ARR.length && 5 != this.selectedBox.bxType)
                if (5 == brainieMain.SELECTED_BOXES_ARR[0].bxType) {
                    for (a = 0; a < this.boxesArr.length; a++)
                        this.boxesArr[a].bxColor == this.selectedBox.bxColor && this.boxesArr[a] != this.selectedBox && brainieMain.SELECTED_BOXES_ARR.push(this.boxesArr[a]);
                    sndPlr.playGameSnd("box_explosion");
                    this.score += 70 * (brainieMain.SELECTED_BOXES_ARR.length - 1);
                    this.scoreUpdate();
                    this.removeSelectedBoxes();
                    brainieMain.gGui.numBubble.hintChange(!0)
                } else
                    this.checkSelectedResult = brainieMain.checkSelection.checkSelected(brainieMain.SELECTED_BOXES_ARR, this.goalNum),
                    !0 == this.checkSelectedResult.var0 && (this.score += this.checkSelectedResult.var1,
                    this.scoreUpdate(),
                    this.removeSelectedBoxes(),
                    0 < this.boxesArr.length && this.setGoalNumber(),
                    this.checkSelectedResult.var2 ? (this.effLr.showColorEff(),
                    sndPlr.playGameSnd("box_color")) : sndPlr.playGameSnd("box_normal"))
        }
        ;
        a.prototype.removeSelectedBoxes = function() {
            for (var a = this, b = 0; b < brainieMain.SELECTED_BOXES_ARR.length; b++) {
                this.boxesArr.splice(this.boxesArr.indexOf(brainieMain.SELECTED_BOXES_ARR[b]), 1);
                for (var d = 0; d < this.boxesArr.length; d++)
                    this.boxesArr[d].bxCol == brainieMain.SELECTED_BOXES_ARR[b].bxCol && this.boxesArr[d].bxRow < brainieMain.SELECTED_BOXES_ARR[b].bxRow && this.boxesArr[d].moveDown();
                brainieMain.SELECTED_BOXES_ARR[b].destroyBox()
            }
            brainieMain.SELECTED_BOXES_ARR = [];
            0 == this.boxesArr.length && (this.score += 1E3,
            this.scoreUpdate(),
            this.effLr.showClearEff(),
            setTimeout(function() {
                return sndPlr.playGameSnd("clear_eff")
            }, 200),
            brainieMain.gGui.numBubble.hideLabel(),
            this.enableGame(!1),
            setTimeout(function() {
                return a.levelComplete()
            }, 1500))
        }
        ;
        a.prototype.setBombsPositions = function() {
            this.bombsWavePosArr = [];
            this.bombsPosArr = [];
            this.bombsTempArr = [];
            for (var a = 1; a < Math.floor(this.levelLimit / this.fallLimit); a++)
                this.bombsTempArr.push(a);
            this.bombsLevelLimit > this.bombsTempArr.length && (this.bombsLevelLimit = this.bombsTempArr.length);
            for (a = 0; a < this.bombsLevelLimit; a++)
                this.bombsWavePosArr.push(this.bombsTempArr.splice(Math.round(Math.random() * (this.bombsTempArr.length - 1)), 1)[0]),
                this.bombsPosArr.push(Math.round(Math.random() * (this.getBoxInWave() - 1)))
        }
        ;
        a.prototype.testBombCreation = function(a) {
            this.tstBmbReturn = !1;
            -1 != this.bombsWavePosArr.indexOf(this.waveID) && this.bombsPosArr[this.bombsWavePosArr.indexOf(this.waveID)] == a && (this.tstBmbReturn = !0);
            return this.tstBmbReturn
        }
        ;
        a.prototype.loop = function() {
            this.updateTimers();
            this.gameRunning ? this.bxsUpdate() : this.gameIsOver && (this.bxsUpdate(),
            this.checkGameOver())
        }
        ;
        a.prototype.bxsUpdate = function() {
            for (var a = 0; a < this.boxesArr.length; a++)
                this.boxesArr[a].tryMove()
        }
        ;
        return a
    }(b.GameBase);
    b.GameMainClassic = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(d) {
        function a(a, b) {
            d.call(this, a, b, "", !1);
            this.setLayers();
            this.resetGui();
            this.visible = !1
        }
        __extends(a, d);
        a.prototype.setLayers = function() {
            this.timers = new b.GameTimers(this.game,this);
            this.numBubble = new b.NumberBubble(this.game,this);
            this.levels = new b.Levels(this.game,this);
            this.scoreLabel = new b.ScoreLabel(this.game,this);
            this.gameButtons = new b.GameButtons(this.game,this)
        }
        ;
        a.prototype.showGui = function(a) {
            this.tempTwn && this.tempTwn.stop();
            this.gameButtons.enableButtons(!1);
            a ? (this.visible = !0,
            this.alpha = 0,
            this.tempTwn = game.add.tween(this),
            this.tempTwn.to({
                alpha: 1
            }, brainieMain.GUI_FADE, Phaser.Easing.Linear.None, !1, 0, !1),
            this.tempTwn.onComplete.add(this.showEnd, this)) : (this.tempTwn = game.add.tween(this),
            this.tempTwn.to({
                alpha: 0
            }, brainieMain.GUI_FADE, Phaser.Easing.Linear.None, !1, 0, !1),
            this.tempTwn.onComplete.add(this.hideEnd, this));
            this.tempTwn.start(0)
        }
        ;
        a.prototype.showEnd = function() {
            this.gameButtons.enableButtons(!0)
        }
        ;
        a.prototype.hideEnd = function() {
            this.visible = !1
        }
        ;
        a.prototype.resetGui = function() {
            this.timers.updateHands(0, 0);
            this.levels.updateLevel(1);
            this.scoreLabel.updateScore(0);
            this.numBubble.resetBubble()
        }
        ;
        return a
    }(Phaser.Group);
    b.GameGui = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(b) {
        function a(a, c) {
            b.call(this, a, c, "", !1);
            this.contCloseY = 573;
            this.contOpenY = -109;
            this.bgBm = this.create(11, 662, "mainSt", "bgLr_3.png");
            this.bgMoveCont = this.game.add.group();
            this.bgMoveCont.x = 3;
            this.bgMoveCont.y = this.contCloseY;
            this.add(this.bgMoveCont);
            this.bgMove2 = this.bgMoveCont.create(0, 238, "mainSt", "bgLr_2_2.png");
            this.bgMove3 = this.bgMoveCont.create(575, 238, "mainSt", "bgLr_2_3.png");
            this.bgMove1 = this.bgMoveCont.create(1, 0, "mainSt", "bgLr_2_1.png");
            this.overBm = this.create(12, 662, "mainSt", "bgLr_1.png");
            this.faceBm = this.create(58, 630, "mainSt", "menuFace.png")
        }
        __extends(a, b);
        a.prototype.openOver = function() {
            this.tempTwn1 && this.tempTwn1.stop();
            this.tempTwn1 = game.add.tween(this.bgMoveCont);
            this.tempTwn1.to({
                y: this.contOpenY
            }, brainieMain.OPEN_TIME, Phaser.Easing.Sinusoidal.InOut, !1, 0, !1);
            this.tempTwn1.onComplete.add(this.openEnd, this);
            this.tempTwn1.start(0);
            this.tempTwn2 && this.tempTwn2.stop();
            this.tempTwn2 = game.add.tween(this.faceBm);
            this.tempTwn2.to({
                y: 730
            }, 250, Phaser.Easing.Sinusoidal.In, !1, 0, !1);
            this.tempTwn2.start(0)
        }
        ;
        a.prototype.openEnd = function() {
            this.faceBm.visible = !1;
            brainieMain.gGui.showGui(!0)
        }
        ;
        a.prototype.closeOver = function() {
            brainieMain.gGui.showGui(!1);
            this.tempTwn1 && this.tempTwn1.stop();
            this.tempTwn1 = game.add.tween(this.bgMoveCont);
            this.tempTwn1.to({
                y: this.contCloseY
            }, brainieMain.CLOSE_TIME, Phaser.Easing.Sinusoidal.InOut, !1, brainieMain.GUI_FADE, !1);
            this.tempTwn1.start(0);
            this.tempTwn2 && this.tempTwn2.stop();
            this.faceBm.visible = !0;
            this.tempTwn2 = game.add.tween(this.faceBm);
            this.tempTwn2.to({
                y: 630
            }, 300, Phaser.Easing.Sinusoidal.InOut, !1, 500 + brainieMain.GUI_FADE, !1);
            this.tempTwn2.start(0)
        }
        ;
        return a
    }(Phaser.Group);
    b.GameOverlay = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(b) {
        function a(a, c) {
            b.call(this, a, c, "", !1);
            this.setColorAnim();
            this.setClearAnim()
        }
        __extends(a, b);
        a.prototype.setColorAnim = function() {
            this.colorEff = this.create(87, 347, "animSt");
            this.colorEff.animations.add("colorEff", Phaser.Animation.generateFrameNames("bAnim_color_", 1, 11, ".png", 2), 20, !1);
            this.colorEff.events.onAnimationComplete.add(this.colorAnimEnd, this);
            this.colorEff.visible = !1
        }
        ;
        a.prototype.colorAnimEnd = function() {
            this.colorEff.visible = !1
        }
        ;
        a.prototype.showColorEff = function() {
            this.colorEff.visible = !0;
            this.colorEff.animations.play("colorEff")
        }
        ;
        a.prototype.setClearAnim = function() {
            this.clearEff = this.create(84, 345, "animSt");
            this.clearEff.animations.add("clearEff", Phaser.Animation.generateFrameNames("bAnim_clean_", 1, 29, ".png", 2), 20, !1);
            this.clearEff.events.onAnimationComplete.add(this.clearAnimEnd, this);
            this.clearEff.visible = !1
        }
        ;
        a.prototype.clearAnimEnd = function() {
            this.clearEff.visible = !1
        }
        ;
        a.prototype.showClearEff = function() {
            this.clearEff.visible = !0;
            this.clearEff.animations.play("clearEff")
        }
        ;
        return a
    }(Phaser.Group);
    b.EffectsLr = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(b) {
        function a(a) {
            b.call(this, a, 16, 96, "gameAreaBg", 0)
        }
        __extends(a, b);
        return a
    }(Phaser.Sprite);
    b.GameBg = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(d) {
        function a(a, b) {
            d.call(this, a, b, "", !1);
            this.setMc()
        }
        __extends(a, d);
        a.prototype.setMc = function() {
            this.Btn_RESET_SELECTION = new b.ImgBtnBase(this.game,39,16,"Btn_RESET_SELECTION","resetSelBtn_up.png","resetSelBtn_dn.png");
            this.add(this.Btn_RESET_SELECTION);
            this.Btn_RESET_SELECTION.events.onInputUp.add(this.resetClick, this);
            this.Btn_GAME_PAUSE = new b.ImgBtnBase(this.game,484,25,"Btn_GAME_PAUSE","pauseBtn_up.png","pauseBtn_dn.png");
            this.add(this.Btn_GAME_PAUSE);
            this.Btn_GAME_PAUSE.events.onInputUp.add(this.pauseClick, this);
            this.resetTitle = new b.BrainieNormalText(this.game,this,91,55,mainFont,gameTexts[lang][6][0],gameTexts[lang][6][1],"#bd8379");
            this.resetTitle.setAnchor(0.5, 0.5);
            this.selectionTitle = new b.BrainieNormalText(this.game,this,91,77,mainFont,gameTexts[lang][7][0],gameTexts[lang][7][1],"#bd8379");
            this.selectionTitle.setAnchor(0.5, 0.5)
        }
        ;
        a.prototype.resetClick = function() {
            brainieMain.gameCallback("RESET_SELECTION")
        }
        ;
        a.prototype.pauseClick = function() {
            brainieMain.gameCallback("GAME_PAUSE")
        }
        ;
        a.prototype.enableButtons = function(a) {
            this.Btn_GAME_PAUSE.enableBtnInput(a);
            this.Btn_RESET_SELECTION.enableBtnInput(a)
        }
        ;
        return a
    }(Phaser.Group);
    b.GameButtons = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(d) {
        function a(a, b) {
            d.call(this, a, b, "", !1);
            isStockAndroid ? (this.x = 339,
            this.y = 24) : (this.x = 346,
            this.y = 10);
            this.setMc()
        }
        __extends(a, d);
        a.prototype.setMc = function() {
            isStockAndroid ? (this.lvlTitle = new b.BrainieNormalText(this.game,this,55,0,mainFont,gameTexts[lang][10][0],24,"#c05c54"),
            this.lvlTitle.setAnchor(0.5, 0),
            this.tmrBg = this.create(0, 34, "mainSt", "clockBgAlt.png"),
            this.Hand1 = this.create(2, 36, "mainSt", "clockAltFill.png"),
            this.Hand2 = this.create(2, 58, "mainSt", "clockAltFill.png")) : (this.tmrBg = this.create(0, 0, "mainSt", "clockBg.png"),
            this.Hand2 = this.create(45, 50, "mainSt", "handBig.png"),
            this.Hand2.anchor.setTo(0.5, 1),
            this.Hand1 = this.create(45, 50, "mainSt", "handSmall.png"),
            this.Hand1.anchor.setTo(5 / 11, 1))
        }
        ;
        a.prototype.updateHands = function(a, b) {
            "undefined" === typeof a && (a = 0);
            "undefined" === typeof b && (b = 0);
            isStockAndroid ? (this.Hand1.scale.x = a,
            this.Hand2.scale.x = b) : (this.Hand1.angle = 360 * a,
            this.Hand2.angle = 360 * b)
        }
        ;
        return a
    }(Phaser.Group);
    b.GameTimers = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(d) {
        function a(a, b) {
            d.call(this, a, b, "", !1);
            this.y = 690;
            this.setMc()
        }
        __extends(a, d);
        a.prototype.setMc = function() {
            this.fld_level = new b.BrainieNormalText(this.game,this,300,0,mainFont,"0",gameTexts[lang][10][1],"#c05c54");
            this.fld_level.setAnchor(0.5, 0);
            this.fld_level.setText(gameTexts[lang][10][0] + ": 1")
        }
        ;
        a.prototype.updateLevel = function(a) {
            "undefined" === typeof a && (a = 0);
            this.fld_level.setText(gameTexts[lang][10][0] + ": " + a.toString())
        }
        ;
        return a
    }(Phaser.Group);
    b.Levels = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(d) {
        function a(a, b) {
            d.call(this, a, b, "", !1);
            this.initScaleX = 0.3;
            this.initScaleY = 0.2;
            this.HIDE_TIME = 200;
            this.tempNum = 0;
            this.x = 243;
            this.y = 58;
            this.setMc();
            this.resetBubble()
        }
        __extends(a, d);
        a.prototype.resetBubble = function() {
            this.hLbl.visible = !1;
            this.fld_num.setText("");
            this.fld_num.visible = !0;
            this.bBg.scale.setTo(this.initScaleX, this.initScaleY);
            this.hLbl.scale.setTo(this.initScaleX, this.initScaleY);
            this.fld_num.scale.setTo(this.initScaleX, this.initScaleY);
            this.alpha = 0
        }
        ;
        a.prototype.hideLabel = function() {
            this.hLbl.visible = !1;
            this.fld_num.setText("");
            this.fld_num.visible = !0;
            this.tryStopTweens();
            this.tempTwn = game.add.tween(this);
            this.tempTwn.to({
                alpha: 0
            }, 200, Phaser.Easing.Sinusoidal.In, !0, 0, !1);
            this.tempTwnScl1 = game.add.tween(this.bBg.scale);
            this.tempTwnScl1.to({
                x: this.initScaleX,
                y: this.initScaleY
            }, 200, Phaser.Easing.Sinusoidal.In, !0, 0, !1);
            this.tempTwnScl2 = game.add.tween(this.hLbl.scale);
            this.tempTwnScl2.to({
                x: this.initScaleX,
                y: this.initScaleY
            }, 200, Phaser.Easing.Sinusoidal.In, !0, 0, !1);
            this.tempTwnScl3 = game.add.tween(this.fld_num.scale);
            this.tempTwnScl3.to({
                x: this.initScaleX,
                y: this.initScaleY
            }, 200, Phaser.Easing.Sinusoidal.In, !0, 0, !1)
        }
        ;
        a.prototype.tryStopTweens = function() {
            this.tempTwn && this.tempTwn.stop();
            this.tempTwnScl1 && this.tempTwnScl1.stop();
            this.tempTwnScl2 && this.tempTwnScl2.stop();
            this.tempTwnScl3 && this.tempTwnScl3.stop()
        }
        ;
        a.prototype.hintChange = function(a) {
            a ? (this.fld_num.visible = !0,
            this.hLbl.visible = !1) : (this.fld_num.visible = !1,
            this.hLbl.visible = !0)
        }
        ;
        a.prototype.setMc = function() {
            this.bBg = this.create(0, 0, "mainSt", "numFldBg.png");
            this.bBg.anchor.setTo(0.5, 0.5);
            this.hLbl = new b.BrainieNormalText(this.game,this,0,2,mainFont,gameTexts[lang][8][0],gameTexts[lang][8][1],"#460c07");
            this.hLbl.setAnchor(0.5, 0.5);
            this.fld_num = new b.BrainieNormalText(this.game,this,0,2,mainFont,"0",67,"#460c07");
            this.fld_num.setAnchor(0.5, 0.5);
            this.fld_num.setText("");
            this.hLbl.visible = !1
        }
        ;
        a.prototype.showNumber = function(a) {
            this.tempNum = a;
            this.fld_num.visible = !0;
            this.hLbl.visible = !1;
            this.tryStopTweens();
            this.tempTwn = game.add.tween(this);
            this.tempTwn.to({
                alpha: 0
            }, 210, Phaser.Easing.Sinusoidal.In, !1, 0, !1);
            this.tempTwn.onComplete.add(this.animHalf, this);
            this.tempTwn.start(0);
            this.tempTwnScl1 = game.add.tween(this.bBg.scale);
            this.tempTwnScl1.to({
                x: this.initScaleX,
                y: this.initScaleY
            }, 200, Phaser.Easing.Sinusoidal.In, !0, 0, !1);
            this.tempTwnScl2 = game.add.tween(this.hLbl.scale);
            this.tempTwnScl2.to({
                x: this.initScaleX,
                y: this.initScaleY
            }, 200, Phaser.Easing.Sinusoidal.In, !0, 0, !1);
            this.tempTwnScl3 = game.add.tween(this.fld_num.scale);
            this.tempTwnScl3.to({
                x: this.initScaleX,
                y: this.initScaleY
            }, 200, Phaser.Easing.Sinusoidal.In, !0, 0, !1)
        }
        ;
        a.prototype.animHalf = function() {
            this.fld_num.setText(this.tempNum.toString());
            this.tryStopTweens();
            this.tempTwn = game.add.tween(this);
            this.tempTwn.to({
                alpha: 1
            }, 400, Phaser.Easing.Back.Out, !0, 0, !1);
            this.tempTwnScl1 = game.add.tween(this.bBg.scale);
            this.tempTwnScl1.to({
                x: 1,
                y: 1
            }, 400, Phaser.Easing.Back.Out, !0, 0, !1);
            this.tempTwnScl2 = game.add.tween(this.hLbl.scale);
            this.tempTwnScl2.to({
                x: 1,
                y: 1
            }, 400, Phaser.Easing.Back.Out, !0, 0, !1);
            this.tempTwnScl3 = game.add.tween(this.fld_num.scale);
            this.tempTwnScl3.to({
                x: 1,
                y: 1
            }, 400, Phaser.Easing.Back.Out, !0, 0, !1)
        }
        ;
        return a
    }(Phaser.Group);
    b.NumberBubble = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(d) {
        function a(a, b, c, k, g, h, l) {
            "undefined" === typeof c && (c = 1);
            "undefined" === typeof k && (k = 1);
            "undefined" === typeof g && (g = 0);
            "undefined" === typeof h && (h = 0);
            "undefined" === typeof l && (l = 0);
            d.call(this, a, b, "", !1);
            this.bxType = this.bxValue = 1;
            this.bxColor = this.bxRow = this.bxCol = 0;
            this.txTemp = "";
            this.boxFrames = "block_1.png block_2.png block_3.png block_4.png block_5.png block_6.png block_7_up.png block_7_dn.png".split(" ");
            this.tempBoxID = 0;
            this.selected = !1;
            this.MAX_SPEED = 3;
            this.ELASTICITY = 0.6;
            this.GRAVITY = 0.1;
            this.goalPosition = this.moveSpeed = 0;
            this.bxValue = c;
            this.bxType = k;
            this.bxCol = g;
            this.bxRow = h;
            this.bxColor = l;
            this.x = brainieMain.BOX_SIZE * this.bxCol;
            this.setBg();
            5 != this.bxType && this.setNumber();
            this.boxBg.inputEnabled = !0;
            this.boxBg.events.onInputDown.add(this.clickEvt, this)
        }
        __extends(a, d);
        a.prototype.enableBox = function(a) {
            this.boxBg.input.enabled = a
        }
        ;
        a.prototype.destroyBox = function() {
            this.boxBg.events.onInputDown.remove(this.clickEvt, this);
            this.boxBg.destroy();
            this.destroy()
        }
        ;
        a.prototype.setNumber = function() {
            this.boxNumSelect = new b.BrainieBmText(this.game,this,brainieMain.BOX_SIZE / 2,35,"salsa_box_2","0",33);
            this.boxNumSelect.setAnchor(0.5, 0.5);
            this.boxNumSelect.visible = !1;
            this.boxNumDedelect = new b.BrainieBmText(this.game,this,brainieMain.BOX_SIZE / 2,35,"salsa_box_1","0",33);
            this.boxNumDedelect.setAnchor(0.5, 0.5);
            if (5 != this.bxType) {
                switch (this.bxType) {
                case 1:
                    this.txTemp = "";
                    break;
                case 2:
                    this.txTemp = "-";
                    break;
                case 3:
                    this.txTemp = "*";
                    break;
                case 4:
                    this.txTemp = "/"
                }
                this.txTemp += this.bxValue.toString();
                this.boxNumSelect.setText(this.txTemp);
                this.boxNumDedelect.setText(this.txTemp)
            }
        }
        ;
        a.prototype.setBg = function() {
            this.tempBoxID = this.bxColor - 1;
            this.boxBg = this.create(0, -17, "mainSt", this.boxFrames[this.tempBoxID])
        }
        ;
        a.prototype.setBomb = function(a) {
            this.tempBoxID = a ? 7 : 6;
            this.boxBg.frameName = this.boxFrames[this.tempBoxID]
        }
        ;
        a.prototype.selectBox = function() {
            0 == brainieMain.SELECTED_BOXES_ARR.length && 2 < this.bxType && 5 > this.bxType ? sndPlr.playGameSnd("box_select_wrong") : (this.selected = !0,
            7 != this.bxColor ? (this.boxNumSelect.visible = !0,
            this.boxNumDedelect.visible = !1,
            sndPlr.playSelectSound()) : (this.setBomb(!0),
            sndPlr.playGameSnd("box_select_boom")),
            brainieMain.actualGame.boxEvent(this))
        }
        ;
        a.prototype.deselectBox = function(a) {
            "undefined" === typeof a && (a = !0);
            this.selected = !1;
            a && brainieMain.actualGame.boxEvent(this);
            7 != this.bxColor ? (this.boxNumSelect.visible = !1,
            this.boxNumDedelect.visible = !0,
            sndPlr.playSelectSound()) : (this.setBomb(!1),
            brainieMain.gGui.numBubble.hintChange(!0),
            sndPlr.playGameSnd("box_select_boom"))
        }
        ;
        a.prototype.clickEvt = function() {
            this.selected ? this.deselectBox(!0) : this.selectBox()
        }
        ;
        a.prototype.dropBox = function() {
            this.y = 0;
            this.moveSpeed = this.MAX_SPEED;
            this.goalPosition = this.bxRow * brainieMain.BOX_SIZE
        }
        ;
        a.prototype.moveDown = function() {
            this.bxRow++;
            this.moveSpeed = this.MAX_SPEED;
            this.goalPosition = this.bxRow * brainieMain.BOX_SIZE
        }
        ;
        a.prototype.tryMove = function() {
            0 != this.moveSpeed && (this.moveSpeed = this.moveSpeed < this.MAX_SPEED ? this.moveSpeed + this.GRAVITY : this.MAX_SPEED,
            this.y += this.moveSpeed * brainieMain.dTm,
            this.y >= this.goalPosition && (this.y = this.goalPosition,
            this.moveSpeed = -this.moveSpeed * this.ELASTICITY,
            0.15 > this.moveSpeed && -0.15 < this.moveSpeed && (this.moveSpeed = 0)))
        }
        ;
        return a
    }(Phaser.Group);
    b.NumBox = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(d) {
        function a(a, b) {
            d.call(this, a, b, "", !1);
            this.lastScore = this.addScore = 0;
            this.y = 690;
            this.setMc()
        }
        __extends(a, d);
        a.prototype.setMc = function() {
            this.fld_score = new b.BrainieNormalText(this.game,this,577,0,mainFont,"0",gameTexts[lang][9][2],"#c05c54");
            this.fld_score.setAnchor(1, 0);
            this.fld_scoreAdd = new b.BrainieNormalText(this.game,this,350,0,mainFont,"",gameTexts[lang][9][2],"#c05c54");
            this.fld_scoreAdd.visible = !1;
            this.fld_scoreAdd.setAnchor(1, 0)
        }
        ;
        a.prototype.updateScore = function(a) {
            var b = this;
            "undefined" === typeof a && (a = 0);
            this.fld_score.setText(gameTexts[lang][9][0] + ": " + a.toString());
            a != this.lastScore && (this.addScore = a - this.lastScore,
            setTimeout(function() {
                return b.showAddText()
            }, 50));
            this.lastScore = a
        }
        ;
        a.prototype.showAddText = function() {
            this.fld_scoreAdd.setText(this.addScore.toString() + "+");
            this.fld_scoreAdd.x = this.fld_score.x - 2 - this.fld_score.getWidth();
            this.tempTwn && this.tempTwn.stop();
            this.fld_scoreAdd.visible = !0;
            this.fld_scoreAdd.alpha = 1;
            this.tempTwn = game.add.tween(this.fld_scoreAdd);
            this.tempTwn.to({
                alpha: 0
            }, 500, Phaser.Easing.Linear.None, !1, 300, !1);
            this.tempTwn.onComplete.add(this.moveComplete, this);
            this.tempTwn.start(0)
        }
        ;
        a.prototype.moveComplete = function() {
            this.fld_scoreAdd.visible = !1
        }
        ;
        return a
    }(Phaser.Group);
    b.ScoreLabel = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(b) {
        function a() {
            b.apply(this, arguments)
        }
        __extends(a, b);
        a.prototype.preload = function() {
            this.preloadBg = this.add.sprite(0, 0, "mainBg");
            this.preloadBarBg = this.add.sprite(177, 355, "preloaderBg");
            this.preloadBarFill = this.add.sprite(184, 361, "preloaderFill");
            this.load.setPreloadSprite(this.preloadBarFill);
            this.load.bitmapFont("salsa_box_1", "img/salsa_box_1.png", "img/salsa_box_1.xml");
            this.load.bitmapFont("salsa_box_2", "img/salsa_box_2.png", "img/salsa_box_2.xml");
            this.load.image("gameAreaBg", "img/gameAreaBg.jpg");
            this.load.image("helpBm", "img/helpBm.jpg");
            this.load.atlasXML("mainSt", "img/mainSt.png", "img/mainSt.xml", null);
            this.load.atlasXML("animSt", "img/animSt.png", "img/animSt.xml", null);
            if (this.game.device.desktop && this.game.device.webAudio)
                for (var a = 0; a < game.snds.length; a++)
                    this.load.audio(game.snds[a], ["snds/" + game.snds[a] + ".mp3", "snds/" + game.snds[a] + ".ogg"])
        }
        ;
        a.prototype.create = function() {
            this.preloadBarBg.kill();
            this.preloadBarFill.kill();
            this.preloadBg.kill();
            this.game.state.start("GameMain", !0, !1)
        }
        ;
        return a
    }(Phaser.State);
    b.Preloader = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(b) {
        function a(a) {
            b.call(this, a, 299, 270, "mainSt", 0);
            this.frameName = "logoBrainie.png";
            this.anchor.setTo(222 / 441, 115 / 170)
        }
        __extends(a, b);
        a.prototype.showLogo = function(a) {
            this.tempTwn && this.tempTwn.stop();
            this.tempTwnScl && this.tempTwnScl.stop();
            a ? (this.visible = !0,
            this.alpha = 0,
            this.scale.setTo(0.4, 0.3),
            this.tempTwn = game.add.tween(this),
            this.tempTwn.to({
                alpha: 1
            }, 600, Phaser.Easing.Back.Out, !1, brainieMain.MENU_FADE, !1),
            this.tempTwn.start(0),
            this.tempTwnScl = game.add.tween(this.scale),
            this.tempTwnScl.to({
                x: 1,
                y: 1
            }, 600, Phaser.Easing.Back.Out, !1, brainieMain.MENU_FADE, !1),
            this.tempTwnScl.onComplete.add(this.showEnd, this)) : (this.tempTwn = game.add.tween(this),
            this.tempTwn.to({
                alpha: 0
            }, 300, Phaser.Easing.Sinusoidal.In, !1, 0, !1),
            this.tempTwn.start(0),
            this.tempTwnScl = game.add.tween(this.scale),
            this.tempTwnScl.to({
                x: 0.4,
                y: 0.3
            }, 300, Phaser.Easing.Sinusoidal.In, !1, 0, !1),
            this.tempTwnScl.onComplete.add(this.hideEnd, this));
            this.tempTwnScl.start(0)
        }
        ;
        a.prototype.hideEnd = function() {
            this.visible = !1
        }
        ;
        a.prototype.showEnd = function() {}
        ;
        return a
    }(Phaser.Sprite);
    b.MainLogo = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(b) {
        function a(a, c) {
            b.call(this, a, c, "", !1);
            this.x = 511;
            this.y = 28;
            this.visible = !1;
            this.btnBg = this.create(0, 0, "mainSt", "sndBtn_up.png");
            this.crossBm = this.create(0, 0, "mainSt", "sndBtn_cross.png");
            this.crossBm.visible = !1;
            this.btnBg.inputEnabled = !0;
            this.btnBg.events.onInputDown.add(this.swDn, this);
            this.btnBg.events.onInputOut.add(this.up, this);
            this.btnBg.events.onInputUp.add(this.upClick, this)
        }
        __extends(a, b);
        a.prototype.showSwitch = function(a) {
            this.visible = this.btnBg.input.enabled = a
        }
        ;
        a.prototype.swDn = function() {
            this.btnBg.frameName = "sndBtn_dn.png"
        }
        ;
        a.prototype.upClick = function() {
            sndPlr.soundOn ? (sndPlr.soundOn = !1,
            this.crossBm.visible = !0) : (sndPlr.soundOn = !0,
            this.crossBm.visible = !1);
            this.up()
        }
        ;
        a.prototype.up = function() {
            this.btnBg.frameName = "sndBtn_up.png"
        }
        ;
        return a
    }(Phaser.Group);
    b.SoundSwitch = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(d) {
        function a(a, c) {
            d.call(this, a, c, "", !1);
            this.titleFld = new b.BrainieNormalText(this.game,this,0,-30,mainFont,gameTexts[lang][14][0],gameTexts[lang][14][1],"#cea9b5");
            this.titleFld.setAnchor(0.5, 0);
            this.Btn_YES = new b.BtnBase(this.game,this,-135,5,gameTexts[lang][15][0],!0,gameTexts[lang][15][1]);
            this.Btn_NO = new b.BtnBase(this.game,this,5,5,gameTexts[lang][16][0],!0,gameTexts[lang][16][1]);
            this.enableCont(!1)
        }
        __extends(a, d);
        a.prototype.enableCont = function(a) {
            this.Btn_YES.enableBtnInput(a);
            this.Btn_NO.enableBtnInput(a)
        }
        ;
        return a
    }(Phaser.Group);
    b.SureCont = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(d) {
        function a(a, b) {
            d.call(this, a, b, "", !1);
            this.setDisabler();
            this.setSoundSwitch()
        }
        __extends(a, d);
        a.prototype.setDisabler = function() {
            this.menuDisabler = this.create(-30, -30, "mainSt", "menuDisabler.png");
            this.menuDisabler.scale.setTo((gW + 60) / 50, (gH + 60) / 50);
            this.menuDisabler.alpha = 0;
            this.menuDisabler.visible = !1;
            this.menuDisabler.inputEnabled = !0
        }
        ;
        a.prototype.showDisabler = function(a) {
            this.menuDisabler.visible = a;
            this.menuDisabler.input.enabled = a
        }
        ;
        a.prototype.showMainMenu = function() {
            this.sndSw && this.sndSw.showSwitch(!0);
            this.scrnMainMenu = new b.Scrn_MainMenu(this.game,this);
            this.showDisabler(!0);
            this.scrnMainMenu.resetMenu();
            this.scrnMainMenu.showContent()
        }
        ;
        a.prototype.hideMainMenu = function() {
            this.sndSw && this.sndSw.showSwitch(!1);
            this.showDisabler(!1);
            this.scrnMainMenu.destroy()
        }
        ;
        a.prototype.showPauseMenu = function() {
            this.sndSw && this.sndSw.showSwitch(!0);
            this.scrnPause = new b.Scrn_Pause(this.game,this);
            this.showDisabler(!0);
            this.scrnPause.showContent()
        }
        ;
        a.prototype.hidePauseMenu = function() {
            this.sndSw && this.sndSw.showSwitch(!1);
            this.showDisabler(!1);
            this.scrnPause.destroy()
        }
        ;
        a.prototype.showLevelMenu = function() {
            this.sndSw && this.sndSw.showSwitch(!0);
            this.scrnLevel = new b.Scrn_Level(this.game,this);
            this.showDisabler(!0);
            this.scrnLevel.showContent()
        }
        ;
        a.prototype.hideLevelMenu = function() {
            this.sndSw && this.sndSw.showSwitch(!1);
            this.showDisabler(!1);
            this.scrnLevel.destroy()
        }
        ;
        a.prototype.showEndMenu = function() {
            this.sndSw && this.sndSw.showSwitch(!0);
            this.scrnEnd = new b.Scrn_End(this.game,this);
            this.showDisabler(!0);
            this.scrnEnd.showContent()
        }
        ;
        a.prototype.hideEndMenu = function() {
            this.sndSw && this.sndSw.showSwitch(!1);
            this.showDisabler(!1);
            this.scrnEnd.destroy()
        }
        ;
        a.prototype.showHelp = function() {
            this.scrnHelp = new b.Scrn_Help(this.game,this);
            this.scrnHelp.showCont()
        }
        ;
        a.prototype.hideHelp = function() {
            this.scrnHelp.destroy()
        }
        ;
        a.prototype.setSoundSwitch = function() {
            sndPlr.soundEnabled && (this.sndSw = new b.SoundSwitch(this.game,this))
        }
        ;
        return a
    }(Phaser.Group);
    b.ScreensCont = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(d) {
        function a(a, c) {
            d.call(this, a, c, "", !1);
            this.scrnTitle = new b.BrainieNormalText(this.game,this,300,170,mainFont,gameTexts[lang][17][0],gameTexts[lang][17][1],"#cea9b5");
            this.scrnTitle.setAnchor(0.5, 0);
            this.scoreFld = new b.BrainieNormalText(this.game,this,300,245,mainFont,gameTexts[lang][9][0] + ": 0",gameTexts[lang][9][1],"#cea9b5");
            this.scoreFld.setAnchor(0.5, 0);
            this.Btn_GAME_BACKTOMAIN = new b.BtnBase(this.game,this,169,335,gameTexts[lang][18][0],!1,gameTexts[lang][18][1]);
            this.Btn_GAME_BACKTOMAIN.bgBm.events.onInputUp.add(this.backToMainClick, this);
            this.Btn_SHOW_HELP = new b.BtnBase(this.game,this,169,420,gameTexts[lang][19][0],!1,gameTexts[lang][19][1]);
            this.Btn_SHOW_HELP.bgBm.events.onInputUp.add(this.helpClick, this)
        }
        __extends(a, d);
        a.prototype.backToMainClick = function() {
            this.setButtons(!1);
            brainieMain.gameCallback("GAME_BACKTOMAIN")
        }
        ;
        a.prototype.helpClick = function() {
            brainieMain.gameCallback("SHOW_HELP")
        }
        ;
        a.prototype.showContent = function() {
            this.scoreFld.setText(gameTexts[lang][9][0] + ": " + brainieMain.actualGame.score.toString());
            this.setButtons(!1);
            this.tempTwn && this.tempTwn.stop();
            this.alpha = 0;
            this.tempTwn = game.add.tween(this);
            this.tempTwn.to({
                alpha: 1
            }, brainieMain.MENU_FADE, Phaser.Easing.Linear.None, !1, 0, !1);
            this.tempTwn.onComplete.add(this.showContEnd, this);
            this.tempTwn.start(0)
        }
        ;
        a.prototype.showContEnd = function() {
            this.setButtons(!0)
        }
        ;
        a.prototype.setButtons = function(a) {
            this.Btn_GAME_BACKTOMAIN.enableBtnInput(a);
            this.Btn_SHOW_HELP.enableBtnInput(a)
        }
        ;
        return a
    }(Phaser.Group);
    b.Scrn_End = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(c) {
        function a(a, e) {
            c.call(this, a, e, "", !1);
            this.setDisabler();
            this.helpCont = this.game.add.group();
            this.add(this.helpCont);
            this.helpBm = this.helpCont.create(10, 10, "helpBm");
            this.hTx1 = new b.BrainieNormalText(this.game,this.helpCont,47,48,mainFont,gameTexts[lang][21][0],gameTexts[lang][21][1],"#784c5b","left");
            this.hTx2 = new b.BrainieNormalText(this.game,this.helpCont,47,235,mainFont,gameTexts[lang][22][0],gameTexts[lang][22][1],"#784c5b","left");
            this.hTx3 = new b.BrainieNormalText(this.game,this.helpCont,47,348,mainFont,gameTexts[lang][23][0],gameTexts[lang][23][1],"#784c5b","left");
            this.hTx4 = new b.BrainieNormalText(this.game,this.helpCont,47,534,mainFont,gameTexts[lang][24][0],gameTexts[lang][24][1],"#784c5b","left");
            this.Btn_CLOSE_HELP = new b.BtnBase(this.game,this.helpCont,170,602,gameTexts[lang][20][0],!1,gameTexts[lang][20][1]);
            this.Btn_CLOSE_HELP.bgBm.events.onInputUp.add(this.closeClick, this)
        }
        __extends(a, c);
        a.prototype.showCont = function() {
            this.enableDisabler(!0);
            this.Btn_CLOSE_HELP.enableBtnInput(!1);
            this.helpCont.y = gH;
            this.tempTwn = game.add.tween(this.helpCont);
            this.tempTwn.to({
                y: 0
            }, 500, Phaser.Easing.Sinusoidal.Out, !1, 0, !1);
            this.tempTwn.onComplete.add(this.showContEnd, this);
            this.tempTwn.start(0)
        }
        ;
        a.prototype.showContEnd = function() {
            this.Btn_CLOSE_HELP.enableBtnInput(!0)
        }
        ;
        a.prototype.closeClick = function() {
            this.Btn_CLOSE_HELP.enableBtnInput(!1);
            this.tempTwn = game.add.tween(this.helpCont);
            this.tempTwn.to({
                y: gH
            }, 400, Phaser.Easing.Sinusoidal.In, !1, 0, !1);
            this.tempTwn.onComplete.add(this.closeEnd, this);
            this.tempTwn.start(0)
        }
        ;
        a.prototype.closeEnd = function() {
            brainieMain.gameCallback("CLOSE_HELP")
        }
        ;
        a.prototype.setDisabler = function() {
            this.disabler = this.create(-30, -30, "mainSt", "menuDisabler.png");
            this.disabler.scale.setTo((gW + 60) / 50, (gH + 60) / 50);
            this.disabler.alpha = 0;
            this.disabler.visible = !1;
            this.disabler.inputEnabled = !0
        }
        ;
        a.prototype.enableDisabler = function(a) {
            this.disabler.visible = a;
            this.disabler.input.enabled = a
        }
        ;
        return a
    }(Phaser.Group);
    b.Scrn_Help = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(c) {
        function a(a, e) {
            c.call(this, a, e, "", !1);
            this.scrnTitle = new b.BrainieNormalText(this.game,this,300,140,mainFont,gameTexts[lang][11][0],gameTexts[lang][11][1],"#cea9b5");
            this.scrnTitle.setAnchor(0.5, 0);
            this.Btn_GAME_NEXT_LEVEL = new b.BtnBase(this.game,this,34,335,gameTexts[lang][12][0],!1,gameTexts[lang][12][1]);
            this.Btn_GAME_NEXT_LEVEL.bgBm.events.onInputUp.add(this.nextClick, this);
            this.Btn_SHOW_HELP = new b.BtnBase(this.game,this,305,335,gameTexts[lang][19][0],!1,gameTexts[lang][19][1]);
            this.Btn_SHOW_HELP.bgBm.events.onInputUp.add(this.helpClick, this);
            this.Btns_GAME_END_LEVEL = new b.BtnBase(this.game,this,169,420,gameTexts[lang][13][0],!1,gameTexts[lang][13][1]);
            this.Btns_GAME_END_LEVEL.bgBm.events.onInputUp.add(this.endClick, this);
            this.sureCont = new b.SureCont(this.game,this);
            this.sureCont.x = this.Btns_GAME_END_LEVEL.x + 131;
            this.sureCont.y = this.Btns_GAME_END_LEVEL.y + 30;
            this.sureCont.Btn_YES.bgBm.events.onInputUp.add(this.yesEndClick, this);
            this.sureCont.Btn_NO.bgBm.events.onInputUp.add(this.noEndClick, this)
        }
        __extends(a, c);
        a.prototype.nextClick = function() {
            this.setButtons(!1);
            this.sureCont.enableCont(!1);
            brainieMain.gameCallback("GAME_NEXT_LEVEL")
        }
        ;
        a.prototype.helpClick = function() {
            brainieMain.gameCallback("SHOW_HELP")
        }
        ;
        a.prototype.endClick = function() {
            this.sureCont.visible = !0;
            this.sureCont.enableCont(!0);
            this.Btns_GAME_END_LEVEL.visible = !1
        }
        ;
        a.prototype.noEndClick = function() {
            this.sureCont.visible = !1;
            this.sureCont.enableCont(!1);
            this.Btns_GAME_END_LEVEL.visible = !0
        }
        ;
        a.prototype.yesEndClick = function() {
            this.setButtons(!1);
            this.sureCont.enableCont(!1);
            brainieMain.gameCallback("GAME_END_LEVEL")
        }
        ;
        a.prototype.showContent = function() {
            this.setButtons(!1);
            this.sureCont.visible = !1;
            this.sureCont.enableCont(!1);
            this.Btns_GAME_END_LEVEL.visible = !0;
            this.tempTwn && this.tempTwn.stop();
            this.alpha = 0;
            this.tempTwn = game.add.tween(this);
            this.tempTwn.to({
                alpha: 1
            }, brainieMain.MENU_FADE, Phaser.Easing.Linear.None, !1, 0, !1);
            this.tempTwn.onComplete.add(this.showContEnd, this);
            this.tempTwn.start(0)
        }
        ;
        a.prototype.showContEnd = function() {
            this.setButtons(!0)
        }
        ;
        a.prototype.setButtons = function(a) {
            this.Btn_GAME_NEXT_LEVEL.enableBtnInput(a);
            this.Btn_SHOW_HELP.enableBtnInput(a);
            this.Btns_GAME_END_LEVEL.enableBtnInput(a)
        }
        ;
        return a
    }(Phaser.Group);
    b.Scrn_Level = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(c) {
        function a(a, b) {
            c.call(this, a, b, "", !1);
            this.setMain();
            this.setMode()
        }
        __extends(a, c);
        a.prototype.showContent = function() {
            this.alpha = 0;
            this.tempTwn = game.add.tween(this);
            this.tempTwn.to({
                alpha: 1
            }, brainieMain.MENU_FADE, Phaser.Easing.Linear.None, !1, 0, !1);
            this.tempTwn.onComplete.add(this.showContEnd, this);
            this.tempTwn.start(0)
        }
        ;
        a.prototype.showContEnd = function() {
            this.btnMainStart.enableBtnInput(!0);
            this.btnMainHelp.enableBtnInput(!0)
        }
        ;
        a.prototype.resetMenu = function() {
            this.brainieLogo.showLogo(!0);
            this.mainMenuCont.visible = !0;
            this.modeMenuCont.visible = !1;
            this.disableButtons()
        }
        ;
        a.prototype.disableButtons = function() {
            this.btnMainStart.enableBtnInput(!1);
            this.btnMainHelp.enableBtnInput(!1);
            this.Btn_GAME_CLASSIC.enableBtnInput(!1);
            this.Btn_GAME_ACTION.enableBtnInput(!1)
        }
        ;
        a.prototype.setMain = function() {
            this.mainMenuCont = this.game.add.group();
            this.add(this.mainMenuCont);
            this.btnMainStart = new b.BtnBase(this.game,this.mainMenuCont,169,360,gameTexts[lang][0][0],!1,gameTexts[lang][0][1]);
            this.btnMainStart.bgBm.events.onInputUp.add(this.startClick, this);
            this.btnMainHelp = new b.BtnBase(this.game,this.mainMenuCont,169,this.btnMainStart.y + 83,gameTexts[lang][19][0],!1,gameTexts[lang][19][1]);
            this.btnMainHelp.bgBm.events.onInputUp.add(this.helpClick, this);
            this.brainieLogo = new b.MainLogo(this.game);
            this.add(this.brainieLogo)
        }
        ;
        a.prototype.startClick = function() {
            this.btnMainStart.enableBtnInput(!1);
            this.btnMainHelp.enableBtnInput(!1);
            this.brainieLogo.showLogo(!1);
            this.tempTwn = game.add.tween(this.mainMenuCont);
            this.tempTwn.to({
                alpha: 0
            }, 300, Phaser.Easing.Linear.None, !1, 0, !1);
            this.tempTwn.onComplete.add(this.switchAnimPt2, this);
            this.tempTwn.start(0)
        }
        ;
        a.prototype.switchAnimPt2 = function() {
            this.mainMenuCont.visible = !1;
            this.mainMenuCont.alpha = 1;
            this.modeMenuCont.visible = !0;
            this.modeMenuCont.alpha = 0;
            this.tempTwn = game.add.tween(this.modeMenuCont);
            this.tempTwn.to({
                alpha: 1
            }, 300, Phaser.Easing.Linear.None, !1, 0, !1);
            this.tempTwn.onComplete.add(this.switchAnimEnd, this);
            this.tempTwn.start(0)
        }
        ;
        a.prototype.switchAnimEnd = function() {
            this.Btn_GAME_CLASSIC.enableBtnInput(!0);
            this.Btn_GAME_ACTION.enableBtnInput(!0)
        }
        ;
        a.prototype.setMode = function() {
            this.modeMenuCont = this.game.add.group();
            this.add(this.modeMenuCont);
            this.selectTitle = new b.BrainieNormalText(this.game,this.modeMenuCont,300,150,mainFont,gameTexts[lang][1][0],gameTexts[lang][1][1],"#cea9b5");
            this.selectTitle.setAnchor(0.5, 0);
            this.Btn_GAME_CLASSIC = new b.BtnBase(this.game,this.modeMenuCont,169,335,gameTexts[lang][2][0],!1,gameTexts[lang][2][1]);
            this.Btn_GAME_CLASSIC.bgBm.events.onInputUp.add(this.classicClick, this);
            this.Btn_GAME_ACTION = new b.BtnBase(this.game,this.modeMenuCont,169,420,gameTexts[lang][3][0],!1,gameTexts[lang][3][1]);
            this.Btn_GAME_ACTION.bgBm.events.onInputUp.add(this.actionClick, this)
        }
        ;
        a.prototype.classicClick = function() {
            this.disableButtons();
            brainieMain.gameCallback("Start_GAME_CLASSIC")
        }
        ;
        a.prototype.actionClick = function() {
            this.disableButtons();
            brainieMain.gameCallback("Start_GAME_ACTION")
        }
        ;
        a.prototype.helpClick = function() {
            brainieMain.gameCallback("SHOW_HELP")
        }
        ;
        return a
    }(Phaser.Group);
    b.Scrn_MainMenu = c
}
)(Brainie || (Brainie = {}));
(function(b) {
    var c = function(c) {
        function a(a, e) {
            c.call(this, a, e, "", !1);
            this.pauseTitle = new b.BrainieNormalText(this.game,this,300,195,mainFont,gameTexts[lang][4][0],gameTexts[lang][4][1],"#cea9b5");
            this.pauseTitle.setAnchor(0.5, 0);
            this.Btn_GAME_RESUME = new b.BtnBase(this.game,this,34,335,gameTexts[lang][5][0],!1,gameTexts[lang][5][1]);
            this.Btn_GAME_RESUME.bgBm.events.onInputUp.add(this.resumeClick, this);
            this.Btn_SHOW_HELP = new b.BtnBase(this.game,this,305,335,gameTexts[lang][19][0],!1,gameTexts[lang][19][1]);
            this.Btn_SHOW_HELP.bgBm.events.onInputUp.add(this.helpClick, this);
            this.Btns_GAME_END_PAUSE = new b.BtnBase(this.game,this,169,420,gameTexts[lang][13][0],!1,gameTexts[lang][13][1]);
            this.Btns_GAME_END_PAUSE.bgBm.events.onInputUp.add(this.endClick, this);
            this.sureCont = new b.SureCont(this.game,this);
            this.sureCont.x = this.Btns_GAME_END_PAUSE.x + 131;
            this.sureCont.y = this.Btns_GAME_END_PAUSE.y + 30;
            this.sureCont.Btn_YES.bgBm.events.onInputUp.add(this.yesEndClick, this);
            this.sureCont.Btn_NO.bgBm.events.onInputUp.add(this.noEndClick, this)
        }
        __extends(a, c);
        a.prototype.resumeClick = function() {
            this.setButtons(!1);
            this.sureCont.enableCont(!1);
            brainieMain.gameCallback("GAME_RESUME")
        }
        ;
        a.prototype.helpClick = function() {
            brainieMain.gameCallback("SHOW_HELP")
        }
        ;
        a.prototype.endClick = function() {
            this.sureCont.visible = !0;
            this.sureCont.enableCont(!0);
            this.Btns_GAME_END_PAUSE.visible = !1
        }
        ;
        a.prototype.noEndClick = function() {
            this.sureCont.visible = !1;
            this.sureCont.enableCont(!1);
            this.Btns_GAME_END_PAUSE.visible = !0
        }
        ;
        a.prototype.yesEndClick = function() {
            this.setButtons(!1);
            this.sureCont.enableCont(!1);
            brainieMain.gameCallback("GAME_END_PAUSE")
        }
        ;
        a.prototype.showContent = function() {
            this.setButtons(!1);
            this.sureCont.visible = !1;
            this.sureCont.enableCont(!1);
            this.Btns_GAME_END_PAUSE.visible = !0;
            this.tempTwn && this.tempTwn.stop();
            this.alpha = 0;
            this.tempTwn = game.add.tween(this);
            this.tempTwn.to({
                alpha: 1
            }, brainieMain.MENU_FADE, Phaser.Easing.Linear.None, !1, 0, !1);
            this.tempTwn.onComplete.add(this.showContEnd, this);
            this.tempTwn.start(0)
        }
        ;
        a.prototype.showContEnd = function() {
            this.setButtons(!0)
        }
        ;
        a.prototype.setButtons = function(a) {
            this.Btn_GAME_RESUME.enableBtnInput(a);
            this.Btn_SHOW_HELP.enableBtnInput(a);
            this.Btns_GAME_END_PAUSE.enableBtnInput(a)
        }
        ;
        return a
    }(Phaser.Group);
    b.Scrn_Pause = c
}
)(Brainie || (Brainie = {}));
